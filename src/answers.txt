

/******************************************************************************
 *  DAT038, TDA417  Datastrukturer och algoritmer, LP2 2019
 *  Lab 4: Path finder
 ******************************************************************************/

Name of lab group: 10
Group member A:    Julia
Group member B:    Casper


/******************************************************************************
 *  How many hours did you spend on the assignment?
 *****************************************************************************/

Group member A:    8
Group member B:    8


/******************************************************************************
 *  List the minimal cost, shortest path, and nr of visited nodes,
 *  for each of the following invocations.
 *****************************************************************************/

$ java RunPathFinder dijkstra AdjacencyGraph graphs/AdjacencyGraph/citygraph-EU.txt "Volos, Greece" "Oulu, Finland"
visited nodes: [961]
minimal cost:  [3488.0]
shortest path: [Oulu, Finland -> Helsinki, Finland -> Tallinn, Estonia -> Białystok, Poland -> Lublin, Poland ->
                Rzeszów, Poland -> Uzhgorod, Ukraine -> Nyíregyháza, Hungary -> Debrecen, Hungary -> Oradea, Romania ->
                Arad, Romania -> Timişoara, Romania]

$ java RunPathFinder astar AdjacencyGraph graphs/AdjacencyGraph/citygraph-EU.txt "Volos, Greece" "Oulu, Finland"
visited nodes: [961]
minimal cost:  [3488.0]
shortest path: [Oulu, Finland -> Helsinki, Finland -> Tallinn, Estonia -> Białystok, Poland -> Lublin, Poland -> Rzeszów, Poland -> Uzhgorod, Ukraine -> Nyíregyháza, Hungary -> Debrecen, Hungary -> Oradea, Romania -> Arad, Romania -> Timişoara, Romania]



$ java RunPathFinder dijkstra NPuzzle 3 "/HFG/BED/C_A/" "/ABC/DEF/GH_/"
visited nodes: [181440]
minimal cost:  [31.0]
shortest path: [/ABC/DEF/GH_/ -> /ABC/DEF/G_H/ -> /ABC/D_F/GEH/ -> /ABC/DF_/GEH/ -> /ABC/DFH/GE_/ -> /ABC/DFH/G_E/ ->
                /ABC/DFH/_GE/ -> /ABC/_FH/DGE/ -> /_BC/AFH/DGE/ -> /B_C/AFH/DGE/ -> /BFC/A_H/DGE/ -> /BFC/AH_/DGE/ ->
                /BF_/AHC/DGE/ -> /B_F/AHC/DGE/ -> /BHF/A_C/DGE/ -> /BHF/AC_/DGE/ -> /BHF/ACE/DG_/ -> /BHF/ACE/D_G/ ->
                /BHF/ACE/_DG/ -> /BHF/_CE/ADG/ -> /BHF/C_E/ADG/ -> /BHF/CE_/ADG/ -> /BHF/CEG/AD_/ -> /BHF/CEG/A_D/ ->
                /BHF/CEG/_AD/ -> /BHF/_EG/CAD/ -> /_HF/BEG/CAD/ -> /H_F/BEG/CAD/ -> /HF_/BEG/CAD/ -> /HFG/BE_/CAD/ ->
                /HFG/BED/CA_/]

$ java RunPathFinder astar NPuzzle 3 "/HFG/BED/C_A/" "/ABC/DEF/GH_/"
visited nodes: [15860]
minimal cost:  [31.0]
shortest path: [/ABC/DEF/GH_/ -> /ABC/DE_/GHF/ -> /ABC/D_E/GHF/ -> /A_C/DBE/GHF/ -> /_AC/DBE/GHF/ -> /DAC/_BE/GHF/ ->
                /DAC/B_E/GHF/ -> /DAC/BHE/G_F/ -> /DAC/BHE/_GF/ -> /DAC/_HE/BGF/ -> /DAC/H_E/BGF/ -> /DAC/HE_/BGF/ ->
                /DA_/HEC/BGF/ -> /D_A/HEC/BGF/ -> /_DA/HEC/BGF/ -> /HDA/_EC/BGF/ -> /HDA/E_C/BGF/ -> /HDA/EGC/B_F/ ->
                /HDA/EGC/BF_/ -> /HDA/EG_/BFC/ -> /HD_/EGA/BFC/ -> /H_D/EGA/BFC/ -> /HGD/E_A/BFC/ -> /HGD/EFA/B_C/ ->
                /HGD/EFA/BC_/ -> /HGD/EF_/BCA/ -> /HG_/EFD/BCA/ -> /H_G/EFD/BCA/ -> /HFG/E_D/BCA/ -> /HFG/_ED/BCA/ ->
                /HFG/BED/_CA/]



$ java RunPathFinder dijkstra NPuzzle 3 "/HGF/BED/C_A/" "/ABC/DEF/GH_/"
visited nodes: [181440]
minimal cost:  [no path found]
shortest path: [no path found]

$ java RunPathFinder astar NPuzzle 3 "/HGF/BED/C_A/" "/ABC/DEF/GH_/"
visited nodes: [181440]
minimal cost:  [no path found]
shortest path: [no path found]



$ java RunPathFinder dijkstra GridGraph graphs/GridGraph/AR0011SR.map "23:161" "130:211"
visited nodes: [20813]
minimal cost:  [366.40411229460744]
shortest path: [130:211 -> 131:210 -> 132:209 -> 133:208 -> 134:207 -> 135:206 -> 136:205 -> 137:204 -> 138:203 ->
                139:202 -> 140:201 -> 141:200 -> 142:199 -> 143:198 -> 144:197 -> 145:196 -> 145:195 -> 145:194 ->
                145:193 -> 145:192 -> 146:191 -> 147:190 -> 148:189 -> 149:188 -> 150:187 -> 151:186 -> 152:185 ->
                153:184 -> 154:183 -> 155:182 -> 156:181 -> 157:180 -> 158:179 -> 159:178 -> 160:177 -> 161:176 ->
                162:175 -> 162:174 -> 162:173 -> 162:172 -> 161:171 -> 160:170 -> 159:170 -> 158:171 -> 157:172 ->
                156:172 -> 155:172 -> 154:172 -> 153:172 -> 152:172 -> 151:172 -> 150:172 -> 149:172 -> 148:172 ->
                147:172 -> 146:172 -> 145:172 -> 144:172 -> 143:172 -> 142:172 -> 141:172 -> 140:172 -> 139:172 ->
                138:172 -> 137:172 -> 136:172 -> 135:172 -> 134:171 -> 133:170 -> 132:169 -> 131:168 -> 130:167 ->
                129:166 -> 128:165 -> 127:165 -> 126:164 -> 125:163 -> 124:162 -> 123:162 -> 122:162 -> 121:161 ->
                120:160 -> 119:159 -> 118:158 -> 117:157 -> 116:157 -> 115:157 -> 114:157 -> 113:157 -> 112:157 ->
                111:157 -> 110:157 -> 109:157 -> 108:157 -> 107:157 -> 106:157 -> 105:157 -> 104:157 -> 103:157 ->
                102:156 -> 101:155 -> 100:154 -> 99:153 -> 98:152 -> 97:151 -> 96:150 -> 95:149 -> 94:148 -> 93:147 ->
                92:146 -> 91:145 -> 90:144 -> 89:143 -> 88:142 -> 87:141 -> 86:140 -> 85:139 -> 84:138 -> 83:137 ->
                82:136 -> 81:135 -> 80:134 -> 79:133 -> 78:132 -> 77:131 -> 76:130 -> 75:129 -> 74:128 -> 73:127 ->
                72:126 -> 71:125 -> 70:124 -> 69:123 -> 68:122 -> 67:121 -> 66:120 -> 65:119 -> 64:118 -> 63:117 ->
                62:116 -> 61:116 -> 60:116 -> 59:116 -> 58:115 -> 57:114 -> 56:113 -> 55:112 -> 54:111 -> 53:110 ->
                52:109 -> 51:108 -> 50:107 -> 49:106 -> 48:105 -> 48:104 -> 48:103 -> 48:102 -> 48:101 -> 48:100 ->
                48:99 -> 48:98 -> 48:97 -> 48:96 -> 48:95 -> 48:94 -> 48:93 -> 48:92 -> 48:91 -> 48:90 -> 48:89 ->
                48:88 -> 48:87 -> 48:86 -> 48:85 -> 48:84 -> 48:83 -> 48:82 -> 48:81 -> 48:80 -> 48:79 -> 48:78 ->
                48:77 -> 48:76 -> 48:75 -> 48:74 -> 48:73 -> 48:72 -> 48:71 -> 48:70 -> 48:69 -> 48:68 -> 48:67 ->
                48:66 -> 48:65 -> 48:64 -> 48:63 -> 47:62 -> 47:61 -> 46:60 -> 45:59 -> 44:58 -> 43:58 -> 42:58 ->
                41:58 -> 40:58 -> 39:59 -> 38:59 -> 37:60 -> 36:61 -> 35:62 -> 34:63 -> 33:64 -> 32:65 -> 31:66 ->
                30:67 -> 29:68 -> 28:69 -> 27:70 -> 26:71 -> 25:72 -> 24:73 -> 23:74 -> 22:75 -> 21:76 -> 20:77 ->
                19:78 -> 18:79 -> 17:80 -> 16:81 -> 15:82 -> 14:83 -> 14:84 -> 14:85 -> 14:86 -> 14:87 -> 14:88 ->
                14:89 -> 14:90 -> 14:91 -> 14:92 -> 15:93 -> 16:94 -> 17:95 -> 18:96 -> 19:97 -> 19:98 -> 19:99 ->
                20:100 -> 20:101 -> 20:102 -> 20:103 -> 21:104 -> 21:105 -> 21:106 -> 21:107 -> 22:108 -> 22:109 ->
                22:110 -> 22:111 -> 22:112 -> 22:113 -> 22:114 -> 22:115 -> 22:116 -> 22:117 -> 22:118 -> 22:119 ->
                22:120 -> 22:121 -> 22:122 -> 22:123 -> 22:124 -> 22:125 -> 22:126 -> 22:127 -> 22:128 -> 22:129 ->
                23:130 -> 23:131 -> 23:132 -> 23:133 -> 23:134 -> 23:135 -> 23:136 -> 23:137 -> 23:138 -> 23:139 ->
                23:140 -> 23:141 -> 23:142 -> 23:143 -> 23:144 -> 23:145 -> 23:146 -> 23:147 -> 23:148 -> 23:149 ->
                23:150 -> 23:151 -> 23:152 -> 23:153 -> 23:154 -> 23:155 -> 23:156 -> 23:157 -> 23:158 -> 23:159 ->
                23:160]



$ java RunPathFinder astar GridGraph graphs/GridGraph/AR0011SR.map "23:161" "130:211"
visited nodes: [12761]
minimal cost:  [366.40411229460744]
shortest path: [130:211 -> 131:210 -> 132:209 -> 133:208 -> 134:207 -> 135:206 -> 136:205 -> 137:204 -> 138:203 ->
                139:202 -> 140:201 -> 141:200 -> 142:199 -> 143:198 -> 144:197 -> 145:196 -> 145:195 -> 145:194 ->
                145:193 -> 145:192 -> 146:191 -> 147:190 -> 148:189 -> 149:188 -> 150:187 -> 151:186 -> 152:185 ->
                153:184 -> 154:183 -> 155:182 -> 156:181 -> 157:180 -> 158:179 -> 159:178 -> 160:177 -> 161:176 ->
                162:175 -> 162:174 -> 162:173 -> 162:172 -> 161:171 -> 160:170 -> 159:170 -> 158:171 -> 157:172 ->
                156:172 -> 155:172 -> 154:172 -> 153:172 -> 152:172 -> 151:172 -> 150:172 -> 149:172 -> 148:172 ->
                147:172 -> 146:172 -> 145:172 -> 144:172 -> 143:172 -> 142:172 -> 141:172 -> 140:172 -> 139:172 ->
                 138:172 -> 137:172 -> 136:172 -> 135:172 -> 134:171 -> 133:170 -> 132:169 -> 131:168 -> 130:167 ->
                 129:166 -> 128:165 -> 127:165 -> 126:164 -> 125:163 -> 124:162 -> 123:162 -> 122:162 -> 121:161 ->
                 120:160 -> 119:159 -> 118:158 -> 117:157 -> 116:157 -> 115:157 -> 114:157 -> 113:157 -> 112:157 ->
                 111:157 -> 110:157 -> 109:157 -> 108:157 -> 107:157 -> 106:157 -> 105:157 -> 104:157 -> 103:157 ->
                 102:156 -> 101:155 -> 100:154 -> 99:153 -> 98:152 -> 97:151 -> 96:150 -> 95:149 -> 94:148 -> 93:147 ->
                 92:146 -> 91:145 -> 90:144 -> 89:143 -> 88:142 -> 87:141 -> 86:140 -> 85:139 -> 84:138 -> 83:137 ->
                 82:136 -> 81:135 -> 80:134 -> 79:133 -> 78:132 -> 77:131 -> 76:130 -> 75:129 -> 74:128 -> 73:127 ->
                 72:126 -> 71:125 -> 70:124 -> 69:123 -> 68:122 -> 67:121 -> 66:120 -> 65:119 -> 64:118 -> 63:117 ->
                 62:116 -> 61:116 -> 60:116 -> 59:116 -> 58:115 -> 57:114 -> 56:113 -> 55:112 -> 54:111 -> 53:110 ->
                 52:109 -> 51:108 -> 50:107 -> 49:106 -> 48:105 -> 48:104 -> 48:103 -> 48:102 -> 48:101 -> 48:100 ->
                 48:99 -> 48:98 -> 48:97 -> 48:96 -> 48:95 -> 48:94 -> 48:93 -> 48:92 -> 48:91 -> 48:90 -> 48:89 ->
                 48:88 -> 48:87 -> 48:86 -> 48:85 -> 48:84 -> 48:83 -> 48:82 -> 48:81 -> 48:80 -> 48:79 -> 48:78 ->
                 48:77 -> 48:76 -> 48:75 -> 48:74 -> 48:73 -> 48:72 -> 48:71 -> 48:70 -> 48:69 -> 48:68 -> 48:67 ->
                 48:66 -> 48:65 -> 48:64 -> 48:63 -> 47:62 -> 47:61 -> 46:60 -> 45:59 -> 44:58 -> 43:58 -> 42:58 ->
                 41:58 -> 40:58 -> 39:59 -> 38:59 -> 37:60 -> 36:61 -> 35:62 -> 34:63 -> 33:64 -> 32:65 -> 31:66 ->
                 30:67 -> 29:68 -> 28:69 -> 27:70 -> 26:71 -> 25:72 -> 24:73 -> 23:74 -> 22:75 -> 21:76 -> 20:77 ->
                 19:78 -> 18:79 -> 17:80 -> 16:81 -> 15:82 -> 14:83 -> 14:84 -> 14:85 -> 14:86 -> 14:87 -> 14:88 ->
                 14:89 -> 14:90 -> 14:91 -> 14:92 -> 15:93 -> 16:94 -> 17:95 -> 18:96 -> 19:97 -> 19:98 -> 19:99 ->
                 20:100 -> 20:101 -> 20:102 -> 20:103 -> 21:104 -> 21:105 -> 21:106 -> 21:107 -> 22:108 -> 22:109 ->
                 22:110 -> 22:111 -> 22:112 -> 22:113 -> 22:114 -> 22:115 -> 22:116 -> 22:117 -> 22:118 -> 22:119 ->
                 22:120 -> 22:121 -> 22:122 -> 22:123 -> 22:124 -> 22:125 -> 22:126 -> 22:127 -> 22:128 -> 22:129 ->
                 23:130 -> 23:131 -> 23:132 -> 23:133 -> 23:134 -> 23:135 -> 23:136 -> 23:137 -> 23:138 -> 23:139 ->
                 23:140 -> 23:141 -> 23:142 -> 23:143 -> 23:144 -> 23:145 -> 23:146 -> 23:147 -> 23:148 -> 23:149 ->
                 23:150 -> 23:151 -> 23:152 -> 23:153 -> 23:154 -> 23:155 -> 23:156 -> 23:157 -> 23:158 -> 23:159 ->
                 23:160]

$ java RunPathFinder dijkstra WordLadder graphs/WordLadder/words-saldo.txt syster broder

visited nodes: [13626]
minimal cost:  [11.0]
shortest path: [broder -> bröder -> bröden -> bruden -> bauden -> banden -> banken -> basken -> basten -> bysten -> byster]

$ java RunPathFinder astar WordLadder graphs/WordLadder/words-saldo.txt syster broder
visited nodes: [1961]
minimal cost:  [11.0]
shortest path: [broder -> bröder -> bröden -> bruden -> bauden -> banden -> banken -> basken -> basten -> bysten -> byster]


/******************************************************************************
 *  For which of the three classes GridGraph, WordLadder and NPuzzle,
 *  did the heuristics .guessCost() have the most impact?
 * 
 *  Why do you think this is the case?
 *****************************************************************************/

N-Puzzle: it compares every char, how far it is from the goal, and summarize how many steps all char needs to move.
          which will be pretty  exact, compare to example gridgraph which don't know anything about eventual blockades.


/******************************************************************************
 *  Show pseudo-code of the following methods that you implemented
 *****************************************************************************/

// WordLadder.outgoingEdges(String word)

	outGoingEdges = new empty ArrayList of DirectEdges to the word

	for every element of the word
		char org = the character at the current element of the word
		sb = new StringBuilder of the word

		for charcter c in the characterSet
			if c is not the same as org
				Set the character At current element in sb to c
				if sb is in the dictonary
					add a new Edge between word and sb to outGoingEdges
	return outGoingEdges



// WordLadder.guessCost(String v, String w)
	double cost = What the estimated cost is between string v and w, starts at 0

	if length of v and length of w are not the same
		throw exception;
	for every element in v
		if the element (character) in v is not the same as the element (character) in w
			increase the cost by one

	return cost



// GridGraph.guessCost(String v, String w)
// Comment : Should be Coord and not String in the input for guessCost

	double deltaX = x coordinate for the goal node minus x cordinate for the start node
	double deltaY = y coordinate for the goal node minus y cordinate for the start node
        double dist = Take the squareroot of deltaX^2 plus deltaY^2

        return dist;


/******************************************************************************
 *  Show pseudo-code of method .searchDijkstra() in PathFinder
 *****************************************************************************/

// PathFinder.searchDijkstra(V start, V goal)

    List of edges: neighbours
    Set of visited nodes: visited
    hashmap with the current shortest distace to node: distTo
    hashmap with previous node in the current shortest path: edgeTo
    Priority Queue, the nodes we want to visit. with a new comparator which prioritize elements depending on their
                    distTo value. : toBeVisited


    <initializing>
    put start node in PQ
    find neighbours(outgoing edges) of start node.
    put 0 to distTo(start)


    <loop>
    while (pq is not empty)
        remove prioritized element from PQ

        if(currentNode is not yet visited)
            add currentNode to visited

            if(found the goal node)
                Arraylist path

                while(not at start node)
                    path.add(currentNode)
                    node = the previous node

                return Result.


             <if we are not in goal yet>
             for each outgoing edges (not the one we came from)
                v = node from/same as current node
                w = node to


                <case 1>
                <if we already know a distance to w>
                if(newDistTo(w) < current distTo(w))
                    put newDistTo(w)
                    put new previous edge
                    add w to PQ

                <case 2>
                <if we haven't visited w yet>
                    put distTo(w)
                    put previous edge
                    add w to PQ

    return false Result


/******************************************************************************
 *  What are the main differences between your implementations 
 *  of .searchAstar() and .searchDijkstra()?
 *****************************************************************************/

one more hashMap with estimatedDistanceTo : estDistTo
PQ with another Comparator, which prioritize the element with the cheapest estimated cost. :toBeVisited
when adding an element to distTo, edgeTo and toBeVisited, we also add to the new HashMap estDistTo.




/******************************************************************************
 *  Are there any known bugs / limitations?
 *****************************************************************************/
 no, not what we know.


/******************************************************************************
 *  Did you collaborate with any other students on this lab?
 *  If so, please write in what way you collaborated and with whom.
 *  Also include any resources (including the web) that you may
 *  may have used in creating your design.
 *****************************************************************************/
no



/******************************************************************************
 *  Describe any serious problems you encountered.                    
 *****************************************************************************/

nope


/******************************************************************************
 *  List any other comments here. Feel free to provide any feedback   
 *  on how much you learned from doing the assignment, and whether    
 *  you enjoyed doing it.                                             
 *****************************************************************************/



  
